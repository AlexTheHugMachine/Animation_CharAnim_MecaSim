
/*! \addtogroup tuto_mesh_shader tuto9.cpp

cf \ref tuto9.cpp + tuto9_color.glsl

`draw( mesh, model, camera )` et les autres utilitaires de draw.h dessinent un objet avec un shader crée en fonction de la description de l'objet et des paramètres. Il est aussi 
très simple de continuer à utiliser Mesh pour décrire l'objet et de le dessiner avec un shader différent, cf Mesh::draw( const GLuint program, ... ). Il faut par contre
créer et configurer le shader avant de pouvoir dessiner l'objet, ainsi que respecter la même convention que Mesh pour décrire les sommets.

repassez dans \ref intro3d et \ref glsl, si nécessaire.

## créer un shader program

les détails sont dans \ref tuto2GL, le plus simple est d'utiliser l'utilitaire read_program() fournit par program.h :

\code
#include "program.h"

GLuint program= 0;

program= read_program("...");
program_print_errors(program);
\endcode

## configurer un shader program

les shaders sont des fonctions comme les autres, pour produire leurs résultats, il faut d'abord affecter une valeur à leurs paramètres avant de pouvoir les exécuter.
par exemple, un vertex shader déclare, en général, 2 types de paramètres : les uniforms et les attributs de sommet (la position, la couleur, la normale, etc...)

_pourquoi ?_

\code
#ifdef VERTEX_SHADER

uniform mat4 mvpMatrix;	// la transformation à appliquer aux sommets, mot-clé : uniform

in vec3 position;	    // la position du ieme sommet, mot-clé : in

void main( )
{
    gl_Position= mvpMatrix * vec4(position, 1);
}
#endif
\endcode

Les shaders (et le reste du pipeline graphique) sont exécutés par les processeurs de la carte graphique au moment ou l'application utilise 
`glDrawArrays(GL_TRIANGLES, 0, n);` ce qui signifie "dessine des triangles avec les sommets d'indice 0 à n-1", soit n/3 triangles.

La carte graphique transforme tous les sommets en parallèle : un vertex shader (la fonction ci-dessus) est exécutée en parallèle par n threads. La matrice 
de transformation est la même pour tous les sommets (et tous les threads), mais bien sur ce n'est pas le cas pour les attributs de sommets... comme la position. 
Chaque thread doit transformer un sommet different, et il faut bien "fournir" la position de chaque sommet à chaque thread. repassez dans \ref interfaceC, 
section shaders, si nécessaire.

C'est pour cette raison que les paramètres `mvpMatrix` et `position` sont déclarés avec des mots-clés différents, `uniform` pour indiquer que tous les threads
utilisent la même transformation (la même matrice) et le mot-clé `in` pour indiquer que position est différent pour chaque sommet / thread. Et bien sur, affecter 
une (seule) valeur à un uniform est différent d'affecter un ensemble de valeurs à un attribut. Mesh s'occuppe des attributs, le plus "complique", mais l'application est 
responsable des uniforms.

Pour utiliser `Mesh::draw( program, ...)`, il faut respecter la convention utilisée par Mesh, qui numérote les attributs des sommets et impose un type qu'il faut respecter :
    - attribut 0, `vec3 position`,
    - attribut 1, `vec2 texcoord`,
    - attribut 2, `vec3 normal`,
    - attribut 3, `vec4 color`,
    - attribut 4, `uint material;`
    
voila la déclaration à utiliser dans le vertex shader, en fonction des attributs nécessaires :
\code
layout(location= 0) in vec3 position;
layout(location= 1) in vec2 texcoord;
layout(location= 2) in vec3 normal;
layout(location= 3) in vec4 color;
layout(location= 4) in uint material;
\endcode

Il ne reste plus qu'à affecter une valeur à chaque uniform avant de pouvoir dessiner avec un shader : relisez le résumé de GLSL, le langage des shaders, \ref glsl 
si nécessaire.

uniforms.h fournit plusieurs utilitaires simplifiés :
\code
#include "uniforms.h"
// selectionner le shader program, si necessaire
// glUseProgram(program);

Transform mvp= { ... };
program_uniform(program, "mvpMatrix", mvp);
//   ou, directement en utilisant openGL :
//   int location= glGetUniformLocation(program, "mvpMatrix");
//   glUniformMatrix4fv(location, 1, GL_TRUE, mvp.buffer());
\endcode

_remarque :_ \ref tuto3GL explique en détail comment affecter une valeur à chaque uniform déclaré dans les shaders.

Pour calculer la transformation mvp, qui permet de projeter directement un sommet sur la camera, il faut savoir ou se trouve l'objet dans le monde, ou se trouve la
camera et quelle est sa projection, c'est à dire les transformations / matrices model, view et projection. Jusqu'à présent afficher un objet ressemblait à ça :
\code
#include "mat.h"
#include "mesh.h"
#include "orbiter.h"
#include "draw.h"

Mesh mesh= { ... };
Transform model= { ... };   // placer l'objet dans le monde
Orbiter camera= { ... };    // une camera qui observe l'obet 

draw(mesh, model, camera);
\endcode

La camera calcule les transformations view et projection, il suffit de les recupérer et de composer model, view, et projection pour obtenir une seule matrice qui 
enchaine les 3 changements de repères :
\code
Orbiter camera= { ... };    // une camera qui observe l'obet 

Transform view= camera.view();
Transform projection= camera.projection();
Transform model= { ... };

// composition des 3 changements de repères
Transform mvp= projection * view * model;   // P(V(M*p))
\endcode


## dessiner

Une fois le shader program complètement paramétré, il ne reste plus qu'à dessiner l'objet avec `Mesh::draw( program ... )`. Un dernier détail, il faut indiquer quels 
attributs sont nécessaires à l'exécution des shaders, cf les parametres `bool` :
\code
#include "color.h"
#include "mesh.h"
#include "program.h"
#include "uniforms.h"

Mesh mesh= { ... };
GLuint program= { ... };
Transfrom mvp= { ... };
// selectionner le program, si necessaire
// glUseProgram(program);
program_uniform(program, "mvpMatrix", mvp);
program_uniform(program, "color", Red());

//   ou, directement en utilisant openGL :
//   int location= glGetUniformLocation(program, "mvpMatrix");
//   glUniformMatrix4fv(location, 1, GL_TRUE, mvp.buffer());
//   et :
//   int location= glGetUniformLocation(program, "color");
//   glUniform4f(location, 1, 1, 0, 1);
    
// indiquer quels attributs de sommets du mesh sont necessaires a l'execution du shader.
// le shader de test n'utilise que position.
mesh.draw(m_program, /* use position */ true, /* use texcoord */ false, /* use normal */ false, /* use color */ false, /* use material index */ false);
\endcode

cf \ref tuto9.cpp pour un exemple complet qui utilise un uniform supplémentaire, qui permet de donner la même couleur aux pixels de l'objet.

Mesh transfère les attributs nécessaire à l'exécution du shader / déclarés par le vertex shader :
\code
mesh.draw(mesh, program, /* use position */ true, /* use texcoord */ false, /* use normal */ false, /* use color */ false, /* use material index */ false);
\endcode

Mesh::draw( ) vérifie (en mode debug, en tout cas) que les attributs déclarés dans le vertex shader sont disponibles dans le Mesh. par exemple, si le vertex 
shader déclare un attribut normale par sommet mais que ces valeurs ne sont pas dans le Mesh, le shader ne peut pas fonctionner...

cf \ref tuto_mesh_buffer pour un exemple complet qui alloue et initialise un buffer pour stocker les positions des sommets du Mesh et qui configure 
un format de sommet (un vertex array object) pour dessiner un objet directement avec openGL, sans utiliser les utilitaires draw( ).

Si plusieurs shaders, ou plusieurs paramètres (couleurs, matieres, textures, etc) sont nécessaires pour dessiner les triangles de l'objet, il y a au moins 2 solutions : 
	- créer un attribut de sommet, l'indice de la matiere du sommet / triangle, cf tuto9_materials.cpp, tuto9_materials.glsl,
	- ou trier les triangles par matiere et dessiner chaque groupe, l'un après l'autre, cf tuto9_groups.cpp, tuto9_groups.glsl,


## debugger un shader

relancer l'application à chaque fois qu'un shader plante, n'est pas très pratique, il est possible de recharger les shaders à la volée, sans quitter l'application, cf 
reload_program() de `program.h`.

\code
#include "program.h"
#include "window.h"

GLuint program;

// init( ) :
    program=read_program("tutos/tuto9_color.glsl");
    program_print_errors(program);
    
// draw( ) :
    if(key_state('r'))
    {
        clear_key_state('r');
        reload_program(program, "tutos/tuto9_color.glsl");
        program_print_errors(program);
    }
\endcode

__attention :__ les uniforms sont re-initialisés à 0 par la compilation d'un shader.

## et avec une texture ?

Il y a plusieurs étapes :
    - d'abord charger la texture, cf GLuint texture= read_texture(0, fichier ); documenté dans texture.h,
    - vérifier que les sommets de l'objet à dessiner sont bien associés à des coordonnées de texture, cf Mesh::texcoord() pour décrire les attributs 
    de sommet, ou Mesh::texcoord_buffer_size(), pour vérifier que les coordonnées de texture sont bien présentes,
    - déclarer l'attribut dans le vertex shader, cf layout(location= 1) in vec2 texcoord;
    - transmettre les texcoord au fragment shader,
    - lire la texture dans la fragment shader, aux bonnes coordonnées.
    
Lisez la section "écrire le fragment shader (et le vertex shader)" dans \ref tuto5GL pour comprendre comment les différents morceaux se connectent ensemble.

Dernière étape, configurer le pipeline pour utiliser la texture, vous pouvez lire les détails dans \ref tuto5GL ou utiliser l'utilitaire program_use_texture( );
\code
// init( ) :
    // verifie que l'objet a bien des coordonnées de texture
    if(m_objet.texcoord_buffer_size() == 0)
        return "erreur, pas de texcoords...";
    
    // charge une texture sur l'unite 0
    m_texture= read_texture(0, "...");

// render( ) :
    // selectionner le shader program, si necessaire
    // glUseProgram(program);

    // . parametres "supplementaires" :
    //   . utilisation d'une texture configuree sur l'unite 0, cf texture= read_texture(0, "...");
    program_use_texture(program, "texture0", 0, m_texture);

    // go !
    // indiquer quels attributs de sommets du mesh sont necessaires a l'execution du shader.
    // le shader utilise position et texcoord.
    m_objet.draw(m_program, /* use position */ true, /* use texcoord */ true, /* use normal */ false, /* use color */ false, /* use material index */ false);
\endcode
cf \ref tuto9_texture1.cpp pour un exemple complet qui charge une texture.

## et avec plusieurs textures ?

C'est la même chose, par contre, il faut charger et configurer une unité de texture par image / texture à utiliser et déclarer un sampler2D par texture dans le shader.
\code
// init( ) :
    // verifie que l'objet a bien des coordonnées de texture
    if(m_objet.texcoord_buffer_size() == 0)
        return "erreur, pas de texcoords...";

    // charge une texture sur l'unite 0
    m_texture0= read_texture(0, "...");

    // charge une texture sur l'unite 1
    m_texture1= read_texture(1, "...");

// render( ) :
    // selectionner le shader program, si necessaire
    // glUseProgram(program);

    // . parametres "supplementaires" :
    //   . utilisation d'une texture configuree sur l'unite 0, cf texture= read_texture(0, "...");
    program_use_texture(program, "texture0", 0, m_texture0);    // le shader déclare: uniform sampler2D texture0;
    
    //   . utilisation d'une texture configuree sur l'unite 1, cf texture= read_texture(1, "...");
    program_use_texture(program, "texture1", 1, m_texture1);    // le shader déclare: uniform sampler2D texture1;

    // go !
    // indiquer quels attributs de sommets du mesh sont necessaires a l'execution du shader.
    // le shader utilise position et texcoord.
    m_objet.draw(m_program, /* use position */ true, /* use texcoord */ true, /* use normal */ false, /* use color */ false, /* use material index */ false);
\endcode

cf \ref tuto9_textures.cpp pour un exemple complet qui charge et utilise 2 textures.

*/
