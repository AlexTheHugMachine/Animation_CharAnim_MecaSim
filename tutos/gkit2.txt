
/*! \mainpage gKit2light

gKit2light est une base de code permettant d'écrire des applications utilisant openGL.

pour l'utiliser, il faut installer quelques dépendances, selon le système que vous utilisez :
    - \ref installation
    
ensuite, c'est parti ! comment écrire une première application gKit : 
    - \ref debut
    - \ref math
    - \ref shaders
    - \ref intro3d

gKit2light est composé de plusieurs utilitaires :
    - window.h fournit un squelette d'application, app.h fournit une classe application de base,
    - image.h et color.h permettent de charger, d'enregistrer et de manipuler des images, pixel par pixel,
    - vec.h et mat.h définissent des vecteurs, des matrices pour manipuler des transformations, des points, des vecteurs,
    - program.h permet de compiler facilement des shaders,
    - uniforms.h permet de définir les valeurs des uniforms des shaders,
    - mesh.h permet de décrire des objets 3d,
    - orbiter.h permet de déplacer une caméra autour d'un objet pour l'observer, 
    - draw.h affiche un mesh pour le point de vue d'une caméra, 
    - wavefront.h permet de charger et d'enregistrer des fichiers .obj,
    - texture.h permet de charger une image et de la plaquer sur un objet,
    - text.h permet d'afficher directement du texte sur la fenetre de l'application,
    - widgets.h permet de controler l'application avec une interface graphique minimaliste.

mais il y a aussi pas mal de tutos / exemple de code :
    - \ref intro3d,
    - \ref tuto_application,
    - \ref transformations,
    - \ref decals,
    - tuto7.cpp, utilise la classe App pour construire l'application,
    - tuto7_camera.cpp, idem tuto7 mais utilise la classe AppCamera, qui définit une camera par défaut,
    - tuto8.cpp, exemple d'utilisation de App::update() pour modifier la transformation de l'objet en fonction du temps,
    
    - \ref tuto_mesh_shader, dessine un objet Mesh avec un shader 'utilisateur', sans utiliser le shader par défaut, montre aussi comment utiliser simplement une, ou plusieurs, textures,
    - \ref tuto9_materials.cpp, dessine toutes les matières d'un objet Mesh avec un shader 'utilisateur', avec un seul `glDraw()`,
    - \ref tuto9_groups.cpp, dessiner toutes les matières d'un objet Mesh avec, ou sans shader 'utilisateur', avec un `glDraw()` par matiere, 
    - \ref tuto_mesh_buffer, complète le tuto9 avec la création des buffers et du vertex array object, pour dessiner un objet Mesh, directement avec openGL... 
    
    - \ref matiere, lumière, matière et brdf,
    - \ref reflets, matière et reflets réalistes,
    - \ref brdf, écrire un shader, matière, brdf, pbr, etc.
    
    - \ref shader_kit est un utilitaire pour prototyper rapidement des shaders.
    
plus ceux dédiés à openGL :
    - \ref interfaceC,
    - \ref glsl,
    - \ref tuto2GL,
    - \ref tuto3GL,
    - \ref tuto4GL,
    - \ref shader_reflect,
    - \ref tuto5GL,
    - \ref draw,
    - \ref wavefront,
    - \ref framebuffer,
    - \ref cubemap,
    - \ref time,
    - \ref uniform_buffers,
    - \ref storage,
    - \ref storage_texture,
    - \ref compute,
    - \ref mdi,
    - \ref ressources.
    
et ceux dédiés au lancer de rayons :
    - \ref intrort,
    - \ref acceleration,
    - \ref sah,
    - \ref precision...
    
    
et un utilitaire pour jouer avec les shaders, \ref shader_kit.cpp \ref shader_kit.

 */
